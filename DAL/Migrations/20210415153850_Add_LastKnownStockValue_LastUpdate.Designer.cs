// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(StockDbContext))]
    [Migration("20210415153850_Add_LastKnownStockValue_LastUpdate")]
    partial class Add_LastKnownStockValue_LastUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("DAL.Entities.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ContinentId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsContinent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContinentId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("DAL.Entities.AreaShare", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AreaId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Fraction")
                        .HasColumnType("REAL");

                    b.Property<int?>("StockId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("StockId");

                    b.ToTable("AreaShare");
                });

            modelBuilder.Entity("DAL.Entities.Currency", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("DAL.Entities.Dividend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<double?>("NativeValue")
                        .HasColumnType("REAL");

                    b.Property<int>("StockId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<double>("UserCosts")
                        .HasColumnType("REAL");

                    b.Property<double>("UserTax")
                        .HasColumnType("REAL");

                    b.Property<double>("UserValue")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.ToTable("Dividends");
                });

            modelBuilder.Entity("DAL.Entities.LastKnownStockValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<int>("StockValueId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StockValueId");

                    b.ToTable("LastKnownStockValue");
                });

            modelBuilder.Entity("DAL.Entities.PitStockValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("NativePrice")
                        .HasColumnType("REAL");

                    b.Property<int>("StockId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<double>("UserPrice")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.ToTable("PitStockValues");
                });

            modelBuilder.Entity("DAL.Entities.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("DAL.Entities.SectorShare", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Fraction")
                        .HasColumnType("REAL");

                    b.Property<int>("SectorId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StockId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SectorId");

                    b.HasIndex("StockId");

                    b.ToTable("SectorShare");
                });

            modelBuilder.Entity("DAL.Entities.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CurrencyKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("Isin")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("LastKnownStockValueId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyKey");

                    b.HasIndex("LastKnownStockValueId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("DAL.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExtRef")
                        .HasColumnType("TEXT");

                    b.Property<double>("Quantity")
                        .HasColumnType("REAL");

                    b.Property<int>("StockId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StockValueId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("UserCosts")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.HasIndex("StockValueId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("DAL.Entities.Area", b =>
                {
                    b.HasOne("DAL.Entities.Area", "Continent")
                        .WithMany()
                        .HasForeignKey("ContinentId");

                    b.Navigation("Continent");
                });

            modelBuilder.Entity("DAL.Entities.AreaShare", b =>
                {
                    b.HasOne("DAL.Entities.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Stock", null)
                        .WithMany("AreaShares")
                        .HasForeignKey("StockId");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("DAL.Entities.Dividend", b =>
                {
                    b.HasOne("DAL.Entities.Stock", "Stock")
                        .WithMany("Dividends")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("DAL.Entities.LastKnownStockValue", b =>
                {
                    b.HasOne("DAL.Entities.PitStockValue", "StockValue")
                        .WithMany()
                        .HasForeignKey("StockValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockValue");
                });

            modelBuilder.Entity("DAL.Entities.PitStockValue", b =>
                {
                    b.HasOne("DAL.Entities.Stock", "Stock")
                        .WithMany("StockValues")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("DAL.Entities.SectorShare", b =>
                {
                    b.HasOne("DAL.Entities.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Stock", null)
                        .WithMany("SectorShares")
                        .HasForeignKey("StockId");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("DAL.Entities.Stock", b =>
                {
                    b.HasOne("DAL.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyKey");

                    b.HasOne("DAL.Entities.LastKnownStockValue", "LastKnownStockValue")
                        .WithMany()
                        .HasForeignKey("LastKnownStockValueId");

                    b.Navigation("Currency");

                    b.Navigation("LastKnownStockValue");
                });

            modelBuilder.Entity("DAL.Entities.Transaction", b =>
                {
                    b.HasOne("DAL.Entities.Stock", "Stock")
                        .WithMany("Transactions")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.PitStockValue", "StockValue")
                        .WithMany()
                        .HasForeignKey("StockValueId");

                    b.Navigation("Stock");

                    b.Navigation("StockValue");
                });

            modelBuilder.Entity("DAL.Entities.Stock", b =>
                {
                    b.Navigation("AreaShares");

                    b.Navigation("Dividends");

                    b.Navigation("SectorShares");

                    b.Navigation("StockValues");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
